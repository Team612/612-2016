// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Arm.h"
#include "RobotMap.h"
#include "Commands/Arm/ArmMove.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() :
		Subsystem("Arm")
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	adjust = RobotMap::armAdjust;
	rotationDetect = RobotMap::armRotationDetect;
}

void Arm::InitDefaultCommand()
{
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new ArmMove());

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

float Arm::Get()
{
	return adjust->Get();
}

void Arm::Set(float x)
{
	adjust->Set(x);
	SmartDashboard::PutNumber("Arm Talon Speed", adjust->Get());
}

void Arm::SetMode(CANTalon::ControlMode mode)
{
	adjust->SetControlMode(mode);
}

/*
 *TODO: Make full % rotation method. Fix how absolute encoder code works based on position
 *
 */

float Arm::GetDegrees()
{
	SmartDashboard::PutNumber("Raw M Encoder Value", rotationDetect->GetVoltage());
	std::printf("Raw M Encoder Value: %f\n", rotationDetect->GetVoltage());

	SmartDashboard::PutNumber("M Encoder %rotation", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));
	std::printf("M Encoder Degrees: %f\n", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));

	return (rotationDetect->GetVoltage()/5.0f) * 360.0f; //TODO: Obsolete!
}

